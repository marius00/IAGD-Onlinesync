[{"F:\\dev2\\OnlineSync\\Server\\client\\src\\index.tsx":"1","F:\\dev2\\OnlineSync\\Server\\client\\src\\App.tsx":"2","F:\\dev2\\OnlineSync\\Server\\client\\src\\modal\\EmailLoginModal.tsx":"3","F:\\dev2\\OnlineSync\\Server\\client\\src\\modal\\EmailStage.tsx":"4","F:\\dev2\\OnlineSync\\Server\\client\\src\\modal\\PincodeStage.tsx":"5"},{"size":208,"mtime":1600950843142,"results":"6","hashOfConfig":"7"},{"size":2363,"mtime":1608759833580,"results":"8","hashOfConfig":"7"},{"size":2347,"mtime":1608762299036,"results":"9","hashOfConfig":"7"},{"size":3299,"mtime":1608902325099,"results":"10","hashOfConfig":"7"},{"size":2767,"mtime":1608845108455,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"16kedk0",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\dev2\\OnlineSync\\Server\\client\\src\\index.tsx",[],["25","26"],"F:\\dev2\\OnlineSync\\Server\\client\\src\\App.tsx",["27","28"],"import * as React from 'react';\r\nimport { FaEnvelope } from 'react-icons/fa';\r\nimport './App.css';\r\nimport EmailLoginModal from './modal/EmailLoginModal';\r\n\r\ndeclare abstract class cefSharp {}\r\nexport const isEmbedded = typeof cefSharp === 'object';\r\n\r\n\r\ninterface IntegrationInterface {\r\n  requestStats(): string;\r\n}\r\n\r\ndeclare let core: IntegrationInterface;\r\n\r\ninterface State {\r\n  modalVisible: boolean;\r\n}\r\n\r\nclass App extends React.Component {\r\n  state: State;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {modalVisible: false};\r\n  }\r\n\r\n  onModalClose() {\r\n    this.setState({modalVisible: false});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {!isEmbedded && <h1>You do not appear to be in a view embedded inside IA. Login will mostly fail (for now)</h1>}\r\n        <h1 className=\"logo header\">Sign-In for Online Backups for GD Item Assistant</h1>\r\n        <i>Keeping your items safe.</i>\r\n\r\n        <div className=\"login-container\">\r\n          <a className=\"btn btn-block btn-social btn-email\" href=\"#\"\r\n             onClick={() => this.setState({modalVisible: true})}>\r\n            <FaEnvelope /> Sign in with E-Mail\r\n          </a>\r\n        </div>\r\n        {this.state.modalVisible ? <EmailLoginModal onClose={() => this.onModalClose()} visible={true}/> : ''}\r\n\r\n        <div className=\"disclaimer\">\r\n          <b>By using this service, the following details will be stored about you:</b><br/>\r\n          <ul>\r\n            <li>Your e-mail address</li>\r\n            <li>The data required to recreate your Grim Dawn items</li>\r\n            <li>The date/time each item were uploaded</li>\r\n            <li>Your IP address for up to 72 hours (for security purposes and throttling excess traffic)</li>\r\n          </ul>\r\n          Your email may in rare cases be utilized to contact you to help diagnose issues detected.<br/>\r\n          No information will be shared with any third parties except where/if legally required to do so by law.\r\n        </div>\r\n        <br/><br/>\r\n\r\n        <footer>\r\n          <i><b>If you run into issues, hop unto the <a href=\"https://discord.com/invite/5wuCPbB\"\r\n                                                        rel=\"noopener noreferrer\" target=\"_blank\">IA\r\n            discord.</a></b></i>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","F:\\dev2\\OnlineSync\\Server\\client\\src\\modal\\EmailLoginModal.tsx",[],"F:\\dev2\\OnlineSync\\Server\\client\\src\\modal\\EmailStage.tsx",["29","30"],"import * as React from 'react';\r\nimport './EmailLoginModal.css';\r\n\r\ninterface Props {\r\n  onCompletion: (email: string, token: string) => void;\r\n}\r\n\r\ninterface State {\r\n  email?: string;\r\n  errorMessage?: string;\r\n}\r\n\r\nclass EmailStage extends React.Component<Props> {\r\n  state: State;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  onSendEmail() {\r\n    const email = this.state.email as string;\r\n\r\n    if (this.validateEmail(email)) {\r\n      let self = this;\r\n      const uri = 'https://api.iagd.evilsoft.net/login';\r\n\r\n      fetch(`${uri}?email=${email}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      )\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            console.log(response);\r\n            throw Error(`Got response ${response.status}, ${response.statusText}`);\r\n          }\r\n          return response;\r\n        })\r\n        .then((response) => response.json())\r\n        .then((json) => {\r\n          if (json.Token !== undefined) {\r\n            this.props.onCompletion(email, json.Token);\r\n          } // Microsoft seems completely and utterly unable to help themselves, and may randomly change how json is generated in azure functions.\r\n          else if (json.token !== undefined) {\r\n            this.props.onCompletion(email, json.token);\r\n          }\r\n          else {\r\n            console.warn('Attempted to fetch token for email, but token was undefined.');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.warn(error);\r\n          self.setState({errorMessage: `${error}`});\r\n        });\r\n\r\n    } else {\r\n      this.setState({errorMessage: 'This is not a valid e-mail address'});\r\n    }\r\n  }\r\n\r\n  onEmailChange(email: string) {\r\n    if (this.state.errorMessage) {\r\n      this.setState({errorMessage: undefined});\r\n    }\r\n    else {\r\n      this.setState({email: email});\r\n    }\r\n  }\r\n\r\n  validateEmail(email: string) {\r\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Please enter your e-mail address</h2>\r\n\r\n        <span> A Pin Code will be sent to verify your identity</span>\r\n        <div className=\"email-form\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              className=\"form-control\"\r\n              autoFocus={true}\r\n              type=\"email\"\r\n              placeholder=\"Your e-mail address\"\r\n              required={true}\r\n              max=\"255\"\r\n              onChange={(e) => this.onEmailChange(e.target.value)}\r\n              onKeyPress={(e) => e.key === 'Enter' ? this.onSendEmail() : ''}\r\n            />\r\n            {this.state.errorMessage && <div className=\"alert alert-warning\">{this.state.errorMessage}</div>}\r\n            <input\r\n              className=\"form-control btn btn-primary\"\r\n              type=\"button\"\r\n              value=\"Send\"\r\n              onClick={() => this.onSendEmail()}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmailStage;\r\n\r\n","F:\\dev2\\OnlineSync\\Server\\client\\src\\modal\\PincodeStage.tsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":14,"column":13,"nodeType":"37","messageId":"38","endLine":14,"endColumn":39},{"ruleId":"39","severity":1,"message":"40","line":40,"column":11,"nodeType":"41","endLine":41,"endColumn":66},{"ruleId":"42","severity":1,"message":"43","line":75,"column":24,"nodeType":"44","messageId":"45","endLine":75,"endColumn":25,"suggestions":"46"},{"ruleId":"42","severity":1,"message":"43","line":75,"column":49,"nodeType":"44","messageId":"45","endLine":75,"endColumn":50,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"@typescript-eslint/no-unused-vars","'core' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["50","51"],["52","53"],"no-global-assign","no-unsafe-negation",{"messageId":"54","fix":"55","desc":"56"},{"messageId":"57","fix":"58","desc":"59"},{"messageId":"54","fix":"60","desc":"56"},{"messageId":"57","fix":"61","desc":"59"},"removeEscape",{"range":"62","text":"63"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"64","text":"65"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"66","text":"63"},{"range":"67","text":"65"},[2059,2060],"",[2059,2059],"\\",[2084,2085],[2084,2084]]